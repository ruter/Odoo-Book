{"./":{"url":"./","title":"Introduction","keywords":"","body":"Odoo Book&#x1F913;Odoo 小书这本书适合什么样的人群？为了更好的阅读这本书下载源码文件这本书包含了什么内容？文本约定Odoo Book &#x1F913;Odoo 小书 这本书适合什么样的人群？ 如果你是一名 Python 开发人员并且有一定的 Web 开发经验，希望学习和入门 Odoo 框架来高效开发业务应用，这本书可以给予你一些参考及帮助。 为了更好的阅读这本书 由于本书的 Demo 都是在 Ubuntu / Mac OS 操作系统下开发，并且使用 PostgreSQL 数据库，为了充分学习 Odoo ，我们建议在学习过程中查找相关文章或补充读物。 如果你使用的是 Windows 操作系统，建议使用 Ubuntu 虚拟机作为开发环境。 下载源码文件 本书涉及的所有源码文件均在 Github 仓库 Odoo-Book-Demo 中可以找到。 这本书包含了什么内容？ 这本书包含 十一 章，主要包含以下部分： 第一章，Odoo 框架介绍 —— 简单介绍 Odoo 框架背景，以及简单演示使用 Odoo 开发的应用。 第二章，Odoo 开发环境搭建 —— 从 Python 3 安装到 Odoo 源码获取一步一步搭建 Odoo 开发环境。 第三章，创建第一个 Odoo 应用 —— 如何启动和配置 Odoo，并利用脚手架工具创建并安装我们的第一个应用程序。 第四章，模型 Model —— 构建应用程序数据，介绍框架的对象关系映射（ORM），以及ORM API 和可用的不同类型的模型以及字段类型， 包括关系字段和计算字段。 第五章, 菜单 Menu —— 介绍 Odoo 组成应用的菜单部分，并且利用 XML 配置我们的第一个菜单。 第六章，视图 View —— 创建应用程序的视图部分，如最基本的列表、表单和搜索视图，以及看板视图。 第七章，动作 Action —— 利用动作关联菜单，实现进入到应用视图部分的功能，并利用最常见的几种动作实现相关的功能。 第八章，计划任务 Cron —— 明白计划任务可以实现的功能，并利用计划任务实现定时消息通知。 第九章，权限控制 Access Control —— 了解 Odoo 的常用几种权限控制的粗细粒度，包括权限组、菜单权限、模型权限和数据集权限， 通过实际的应用场景将权限应用结合并且实现。 第十章，Web 控制器 Web Controller —— 作为一个 Web 框架，肯定包含请求 (Request) 和响应（Response）的处理， 利用 Odoo 的 Web 控制器实现简单的接口，并且结合 Jinja2 模版引擎渲染一个简单的非 Odoo 视图的 Web 页面。 第十一章，模版引擎 QWeb —— QWeb 是一个网页框架，在 Odoo 8 中被初次使用，XML 模板引擎是它的核心，这一章节我们将学习 QWeb 的基础语法，并替换 Jinja2 模版引擎渲染的 Web 页面。 第十二章, 国际化 i18n —— 文本约定 本书中使用了如下文本约定。 一段代码文本如下： 当我们希望你重点注意的某个特定部分，或第一次出现的单词，相关的行或条目将标注显示，代码中则为注释： 这里是重点部分。 这里是第一次出现的单词。 'data': [ 'security/ir.model.access.csv', 'views/menu.xml', // 这里是注释 'views/list_view.xml', // 这里是注释 ]” 菜单或对话框中出现的单词会加上直角引号如： 在Web客户端中，访问「应用程序」顶部菜单并选择「更新应用程序列表」菜单选项。 其他说明 ⚠️ 警告或重要说明起来像这样。 &#x1F4A1; 提示和技巧看起来像这样。 "},"Odoo 框架介绍.html":{"url":"Odoo 框架介绍.html","title":"Odoo 框架介绍","keywords":"","body":"Odoo 框架介绍Odoo 框架介绍 "},"Odoo 背景介绍.html":{"url":"Odoo 背景介绍.html","title":"Odoo 背景介绍","keywords":"","body":"Odoo 背景介绍Odoo 背景介绍 "},"Odoo 开发的应用简单演示.html":{"url":"Odoo 开发的应用简单演示.html","title":"Odoo 开发的应用简单演示","keywords":"","body":"Odoo 开发的应用简单演示Odoo 开发的应用简单演示 "},"Odoo 环境搭建.html":{"url":"Odoo 环境搭建.html","title":"Odoo 环境搭建","keywords":"","body":"Odoo 环境搭建Odoo 环境搭建 "},"安装 Git.html":{"url":"安装 Git.html","title":"安装 Git","keywords":"","body":"安装 GitUbuntu 安装 GitMac 安装 Git安装 Git Git 是一个分布式版本控制软件。 由于 Odoo 的源码获取和一系列其他工具的源码获取都需要用到 Git，所以我们先安装 Git。 Ubuntu 安装 Git $ sudo apt-get update $ sudo apt-get install git Mac 安装 Git $ brew install git &#x1F4A1; Mac 安装 Git 使用的是 Homebrew —— macOS 缺失的软件包的管理器，安装方法详见Homebrew 官网。 "},"安装 PostgreSQL.html":{"url":"安装 PostgreSQL.html","title":"安装 PostgreSQL","keywords":"","body":"安装 PostgreSQLUbuntu 安装 PostgreSQLUbuntu 17.04 - 17.10Ubuntu 14.04 16.04Mac OS启动 PostgreSQL 服务创建 PostgreSQL 用户和数据库安装 PostgreSQL PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统），在灵活的BSD许可证下发行。 它在其他开放源代码数据库系统（比如MySQL和Firebird），和专有系统（比如Oracle、Sybase、IBM的DB2和Microsoft SQL Server）之外，为用户又提供了一种选择。 Ubuntu 安装 PostgreSQL 本书使用的 PostgreSQL 版本为 9.6 Ubuntu 17.04 - 17.10 $ sudo apt-get install postgresql-9.6 -y Ubuntu 14.04 16.04 $ apt-get install lsb-release software-properties-common -y $ sudo add-apt-repository \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -sc)-pgdg main\" $ wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add - $ sudo apt-get update $ sudo apt-get install postgresql-9.6 -y Mac OS Mac 用户可以在下载官方 APP 来启动 PostgreSQL，带有版本管理，下载地址。也可以通过 Homebrew 进行安装。 $ brew install postgresql@9.6 启动 PostgreSQL 服务 $ sudo service postgresql start 创建 PostgreSQL 用户和数据库 创建 odoo 用户 $ sudo -u postgres -i $ createuser -P --superuser odoo 创建 odoo 数据库 $ createdb odoo -U odoo -W ⚠️ 若出现以下错误： FATAL: Peer authentication failed for user \"odoo\" 则需要将 pg_hba.conf 的配置： # cat pg_hba.conf ... # \"local\" is for Unix domain socket connections only local all all peer # IPv4 local connections: host all all 127.0.0.1/32 ident # IPv6 local connections: host all all ::1/128 ident 修改为： # cat pg_hba.conf ... # \"local\" is for Unix domain socket connections only local all all md5 # IPv4 local connections: host all all 127.0.0.1/32 md5 # IPv6 local connections: host all all ::1/128 md5 Ubuntu 配置文件路径 /etc/postgresql/9.6/main/pg_hba.conf Mac 配置文件路径 /Users/{username}/Library/Application Support/Postgres/var-9.6/pg_hba.conf "},"获取 Odoo 源码.html":{"url":"获取 Odoo 源码.html","title":"获取 Odoo 源码","keywords":"","body":"获取 Odoo 源码获取 Odoo 源码 Odoo 是一个开源项目，我们可以轻松的在 Github 上找到它的源码。 本书中使用的是 12.0 版本的 Odoo，所以在拉取代码时选择 12.0 的分支。 确保拉取的速度，使用--depth参数。 git clone https://github.com/odoo/odoo.git -b 12.0 --depth=1 ./odoo_dev 为了熟悉和学习源码，我们直接将源码克隆到 odoo_dev 目录下，并且后续的 Demo 开发和知识点讲解都是直接在该目录下进行的。 "},"安装 Python3.html":{"url":"安装 Python3.html","title":"安装 Python3","keywords":"","body":"安装 Python3使用 pyenv 安装 Python3安装 Python3 本书使用的 Python 版本为 3.6.5 如果已经安装了该版本的 Python 或已经熟悉使用 pyenv，可以跳过这一章节 使用 pyenv 安装 Python3 开始安装 Odoo 依赖之前，考虑到每个人的 Python 环境不一致，所以就讲解一下如何利用 pyenv 安装不同版本的 Python。 在命令行直接输入： $ sudo curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash 执行完成后会提示需要将以下内容加入命令行配置文件： export PATH=\"/root/.pyenv/bin:$PATH\" eval \"$(pyenv init -)\" eval \"$(pyenv virtualenv-init -)\" export LC_ALL=C.UTF-8 export LANG=C.UTF-8 使用 bash 命令行则加入到 ~/.bashrc 文件末尾，并执行 source ~/.bashrc。 使用 zsh 命令行则加入到 ~/.zshrc 文件末尾，并执行 source ~/.zshrc。 配置生效后，即可通过执行以下命令来安装 Python： $ pyenv install 3.6.5 Python 安装成功后，可以使用以下命令来切换全局的 Python 版本： $ pyenv global 3.6.5 ⚠️ 若使用 Ubuntu 请确保系统中有 Python 依赖，命令来自Common build problems $ sudo apt-get install -y gcc make build-essential libssl-dev zlib1g-dev libbz2-dev \\ libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \\ xz-utils tk-dev libffi-dev liblzma-dev libldap2-dev libsasl2-dev &#x1F4A1; 若使用 pyenv install 3.6.5 安装速度过慢，可以先在搜狐的镜像下载源码包，放到 pyenv 的 cache 目录后在执行安装指定版本，例如： $ v=3.6.5;wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz -P ~/.pyenv/cache/;pyenv install $v "},"使用 pipenv 安装依赖.html":{"url":"使用 pipenv 安装依赖.html","title":"使用 pipenv 安装依赖","keywords":"","body":"使用 pipenv 安装依赖初始化 Pipfile安装依赖 激活虚拟环境使用 pipenv 安装依赖 Pipenv 会自动帮你管理虚拟环境和相关依赖，并且提供了一系列命令和选项来帮助你实现各种依赖和环境管理相关的操作。 简而言之，它更方便、完善和安全。 本书强烈建议使用 pipenv 来管理环境依赖来养成良好的环境管理习惯，当然你也可以跳过这一章节直接使用 pip 以及 odoo_dev 中的 requirements.txt 来安装依赖，若熟悉 pipenv 可以跳过这一章节。 安装之前需要删除 requirements.txt 中的最后一行 pypiwin32 ; sys_platform == 'win32' 并保存。 初始化 Pipfile 首先输入以下命令生成 Pipfile： $ pipenv --python 3.6.5 Warning: Python 3.6.5 was not found on your system... Would you like us to install CPython 3.6.5 with pyenv? [Y/n]: 若出现以上提示则可以参考安装 Python3来安装对应的 Python 版本，当然你也可以直接输入 Y 使用 pyenv 来安装。 虚拟环境创建成功后会有类似的内容输出： Creating a virtualenv for this project… Pipfile: /root/odoo_dev/Pipfile Using /root/.pyenv/versions/3.6.5/bin/python3.6m (3.6.5) to create virtualenv… ⠦ Creating virtual environment...Using base prefix '/root/.pyenv/versions/3.6.5' New python executable in /root/.local/share/virtualenvs/odoo_dev-PjULxt24/bin/python3.6m Also creating executable in /root/.local/share/virtualenvs/odoo_dev-PjULxt24/bin/python Installing setuptools, pip, wheel... done. Running virtualenv with interpreter /root/.pyenv/versions/3.6.5/bin/python3.6m ✔ Successfully created virtual environment! Virtualenv location: /root/.local/share/virtualenvs/odoo_dev-PjULxt24 requirements.txt found, instead of Pipfile! Converting… ✔ Success! Warning: Your Pipfile now contains pinned versions, if your requirements.txt did. We recommend updating your Pipfile to specify the \"*\" version, instead. Pipenv 会自动在 ~/.local/share/virtualenvs 目录下新建一个虚拟环境 virtualenv 目录，目录名一般为odoo_dev-*，若在当前目录下存在 requirements.txt 文件时，会自动安装里面的库及依赖，并写入到 Pipfile 中。 可以使用 cat 查看一下 Pipfile 中的内容： [[source]] name = \"pypi\" url = \"https://pypi.org/simple\" verify_ssl = true [dev-packages] [packages] babel = \"==2.3.4\" chardet = \"==3.0.4\" decorator = \"==4.0.10\" docutils = \"==0.12\" ebaysdk = \"==2.1.5\" feedparser = \"==5.2.1\" gevent = \"==1.3.4\" greenlet = \"==0.4.13\" html2text = \"==2016.9.19\" libsass = \"==0.12.3\" lxml = \"==4.2.3\" mako = \"==1.0.4\" mock = \"==2.0.0\" num2words = \"==0.5.6\" ofxparse = \"==0.16\" passlib = \"==1.6.5\" pillow = \"==4.0.0\" psutil = \"==4.3.1\" psycopg2 = \"==2.7.3.1\" pydot = \"==1.2.3\" pyldap = \"==2.4.28\" pyparsing = \"==2.1.10\" pypdf2 = \"==1.26.0\" pyserial = \"==3.1.1\" python-dateutil = \"==2.5.3\" pytz = \"==2016.7\" pyusb = \"==1.0.0\" qrcode = \"==5.3\" reportlab = \"==3.3.0\" requests = \"==2.20.0\" suds-jurko = \"==0.6\" vatnumber = \"==1.2\" vobject = \"==0.9.3\" xlsxwriter = \"==0.9.3\" xlwt = \"==1.3.*\" xlrd = \"==1.0.0\" pypiwin32 = \"*\" Jinja2 = \"==2.8.1\" MarkupSafe = \"==0.23\" Werkzeug = \"==0.11.15\" [requires] python_version = \"3.6\" 安装依赖 激活虚拟环境 安装 Pipfile 中的依赖我们只需要执行 $ pipenv install 最后再执行以下命令就可以激活我们的虚拟环境了 $ pipenv shell ⚠️ 若使用 Ubuntu 系统且依赖中的 pyldap 安装失败显示 fatal error: lber.h: No such file or directory，则需要先安装以下库： $ sudo apt-get install -y libldap2-dev libsasl2-dev &#x1F4A1; 若执行 pipenv install 速度过慢，可以将 Pipfile 中的 source url 修改为： url = \"http://mirrors.aliyun.com/pypi/simple\" "},"启动 Odoo.html":{"url":"启动 Odoo.html","title":"启动 Odoo","keywords":"","body":"启动 Odoo启动 Odoo "},"创建第一个 Odoo 应用.html":{"url":"创建第一个 Odoo 应用.html","title":"创建第一个 Odoo 应用","keywords":"","body":"创建第一个 Odoo 应用 \"待办事项Todo\"创建第一个 Odoo 应用 \"待办事项Todo\" "},"启动脚本 odoo-bin.html":{"url":"启动脚本 odoo-bin.html","title":"启动脚本 odoo-bin","keywords":"","body":"启动脚本 odoobin启动脚本 odoobin "},"常用参数介绍.html":{"url":"常用参数介绍.html","title":"常用参数介绍","keywords":"","body":"常用参数介绍常用参数介绍 "},"指定数据库.html":{"url":"指定数据库.html","title":"指定数据库","keywords":"","body":"指定数据库指定数据库 "},"指定 addons 目录.html":{"url":"指定 addons 目录.html","title":"指定 addons 目录","keywords":"","body":"指定 addons 目录指定 addons 目录 "},"启动时升级 addons.html":{"url":"启动时升级 addons.html","title":"启动时升级 addons","keywords":"","body":"启动时升级 addons启动时升级 addons "},"配置文件.html":{"url":"配置文件.html","title":"配置文件","keywords":"","body":"配置文件配置文件 "},"生成配置文件.html":{"url":"生成配置文件.html","title":"生成配置文件","keywords":"","body":"生成配置文件生成配置文件 "},"配置的简单说明.html":{"url":"配置的简单说明.html","title":"配置的简单说明","keywords":"","body":"配置的简单说明配置的简单说明 "},"scaffold.html":{"url":"scaffold.html","title":"scaffold","keywords":"","body":"scaffoldscaffold "},"创建应用模块.html":{"url":"创建应用模块.html","title":"创建应用模块","keywords":"","body":"创建应用模块创建应用模块 "},"Odoo Debug 开发模式.html":{"url":"Odoo Debug 开发模式.html","title":"Odoo Debug 开发模式","keywords":"","body":"Odoo Debug 开发模式Odoo Debug 开发模式 "},"普通 Debug 模式.html":{"url":"普通 Debug 模式.html","title":"普通 Debug 模式","keywords":"","body":"普通 Debug 模式普通 Debug 模式 "},"带 asserts 的 Debug 模式.html":{"url":"带 asserts 的 Debug 模式.html","title":"带 asserts 的 Debug 模式","keywords":"","body":"带 asserts 的 Debug 模式带 asserts 的 Debug 模式 "},"模型 Model.html":{"url":"模型 Model.html","title":"模型 Model","keywords":"","body":""},"定义模型.html":{"url":"定义模型.html","title":"定义模型","keywords":"","body":"定义模型定义模型 "},"Model.html":{"url":"Model.html","title":"Model","keywords":"","body":"ModelModel "},"TransientModel.html":{"url":"TransientModel.html","title":"TransientModel","keywords":"","body":"TransientModelTransientModel "},"Odoo 的 ORM API.html":{"url":"Odoo 的 ORM API.html","title":"Odoo 的 ORM API","keywords":"","body":"Odoo 的 ORM APIOdoo 的 ORM API "},"创建数据.html":{"url":"创建数据.html","title":"创建数据","keywords":"","body":"创建数据创建数据 "},"查询数据.html":{"url":"查询数据.html","title":"查询数据","keywords":"","body":"查询数据查询数据 "},"过滤表达式 Domain.html":{"url":"过滤表达式 Domain.html","title":"过滤表达式 Domain","keywords":"","body":"过滤表达式 Domain过滤表达式 Domain "},"模型继承.html":{"url":"模型继承.html","title":"模型继承","keywords":"","body":"模型继承模型继承 "},"字段 Field.html":{"url":"字段 Field.html","title":"字段 Field","keywords":"","body":"字段 Field字段 Field "},"特殊字段.html":{"url":"特殊字段.html","title":"特殊字段","keywords":"","body":"特殊字段特殊字段 "},"计算字段.html":{"url":"计算字段.html","title":"计算字段","keywords":"","body":"计算字段计算字段 "},"关联字段.html":{"url":"关联字段.html","title":"关联字段","keywords":"","body":"关联字段关联字段 "},"菜单 Menu.html":{"url":"菜单 Menu.html","title":"菜单 Menu","keywords":"","body":"菜单 Menu菜单 Menu "},"菜单创建.html":{"url":"菜单创建.html","title":"菜单创建","keywords":"","body":"菜单创建菜单创建 "},"视图 View.html":{"url":"视图 View.html","title":"视图 View","keywords":"","body":"视图 View视图 View "},"列表视图 ListView.html":{"url":"列表视图 ListView.html","title":"列表视图 ListView","keywords":"","body":"列表视图 ListView列表视图 ListView "},"表单视图 FormView.html":{"url":"表单视图 FormView.html","title":"表单视图 FormView","keywords":"","body":"表单视图 FormView表单视图 FormView "},"搜索视图 SearchView.html":{"url":"搜索视图 SearchView.html","title":"搜索视图 SearchView","keywords":"","body":"搜索视图 SearchView搜索视图 SearchView "},"动作 Action.html":{"url":"动作 Action.html","title":"动作 Action","keywords":"","body":"动作 Action动作 Action "},"窗口动作.html":{"url":"窗口动作.html","title":"窗口动作","keywords":"","body":"窗口动作窗口动作 "},"服务器动作.html":{"url":"服务器动作.html","title":"服务器动作","keywords":"","body":"服务器动作服务器动作 "},"URl 动作.html":{"url":"URl 动作.html","title":"URl 动作","keywords":"","body":"URl 动作URl 动作 "},"客户端动作.html":{"url":"客户端动作.html","title":"客户端动作","keywords":"","body":"客户端动作客户端动作 "},"计划任务 Cron.html":{"url":"计划任务 Cron.html","title":"计划任务 Cron","keywords":"","body":"计划任务 Cron计划任务 Cron "},"权限控制 Access Control.html":{"url":"权限控制 Access Control.html","title":"权限控制 Access Control","keywords":"","body":"权限控制 Access Control权限控制 Access Control "},"权限组.html":{"url":"权限组.html","title":"权限组","keywords":"","body":"权限组权限组 "},"菜单权限.html":{"url":"菜单权限.html","title":"菜单权限","keywords":"","body":"菜单权限菜单权限 "},"模型权限.html":{"url":"模型权限.html","title":"模型权限","keywords":"","body":"模型权限模型权限 "},"数据集权限.html":{"url":"数据集权限.html","title":"数据集权限","keywords":"","body":"数据集权限数据集权限 "},"Web 控制器 Web Controller.html":{"url":"Web 控制器 Web Controller.html","title":"Web 控制器 Web Controller","keywords":"","body":"Web 控制器 Web ControllerWeb 控制器 Web Controller "},"路由控制.html":{"url":"路由控制.html","title":"路由控制","keywords":"","body":"路由控制路由控制 "},"请求参数.html":{"url":"请求参数.html","title":"请求参数","keywords":"","body":"请求参数请求参数 "},"响应内容.html":{"url":"响应内容.html","title":"响应内容","keywords":"","body":"响应内容响应内容 "},"结合Jinja2.html":{"url":"结合Jinja2.html","title":"结合Jinja2","keywords":"","body":"结合Jinja2结合Jinja2 "},"模版引擎 QWeb.html":{"url":"模版引擎 QWeb.html","title":"模版引擎 QWeb","keywords":"","body":"模版引擎 QWeb模版引擎 QWeb "}}